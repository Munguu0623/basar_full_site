'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { Send, Loader2, Bot, User, AlertTriangle } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export const AIChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! –ë–∏ –∞–º—å—Ç–¥—ã–Ω –∞–Ω—Ö–Ω—ã —Ç—É—Å–ª–∞–º–∂–∏–π–Ω AI —Ç—É—Å–ª–∞—Ö. –¢–∞–Ω–¥ —è–º–∞—Ä –∞—Å—É—É–ª—Ç –±–∞–π–Ω–∞ –≤—ç?',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSend = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getAIResponse(inputValue),
        isUser: false,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1500 + Math.random() * 1000);
  };

  const getAIResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('—Ö–æ—Ä–¥–ª–æ–≥–æ') || lowerQuestion.includes('—Ö–æ—Ä')) {
      return '–ê–º—å—Ç–∞–Ω —Ö–æ—Ä–¥—Å–æ–Ω—ã —à–∏–Ω–∂ —Ç—ç–º–¥—ç–≥: –±”©”©–ª–∂–∏—Ö, —Å—É—É–ª–≥–∞—Ö, —Å—É–ª –¥–æ—Ä–æ–π –±–∞–π–¥–∞–ª, —Å—É–¥–∞—Å —Ö—É—Ä–¥—Ä–∞—Ö, –∞–º—å—Å–≥–∞–∞—Ö —Ö“Ø–Ω–¥—Ä—ç–ª. –Ø–ê–†–ê–õ–¢–ê–ô —ç–º–Ω—ç–ª—ç–≥—Ç —Ö“Ø—Ä–≥—ç—ç—Ä—ç–π! –ë”©”©–ª–≥”©—Ö–≥“Ø–π –±–∞–π—Ö—ã–≥ –æ—Ä–æ–ª–¥–æ–æ–¥ —à—É—É–¥ —ç–º—á–∏–¥ “Ø–∑“Ø“Ø–ª–Ω—ç.';
    }
    
    if (lowerQuestion.includes('—Ü—É—Å') || lowerQuestion.includes('—à–∞—Ä—Ö')) {
      return '–¶—É—Å –∞–ª–¥–∞–ª—Ç—ã–≥ –∑–æ–≥—Å–æ–æ—Ö—ã–Ω —Ç—É–ª–¥: 1) –¶—ç–≤—ç—Ä –¥–∞–∞–≤—É—É–≥–∞–∞—Ä —à–∞—Ä—Ö—ã–≥ –¥–∞—Ä–∂ –±–∞—Ä–∏–Ω–∞, 2) –ê–º—å—Ç–Ω—ã–≥ —Ç–∞–π–≤–∞–Ω –±–∞–π–ª–≥–∞–Ω–∞, 3) –•—ç—Ä—ç–≤ —Ü—É—Å –∏—Ö –∞–ª–¥–∞–∂ –±–∞–π–≤–∞–ª —è–∞—Ä–∞–ª—Ç–∞–π —ç–º–Ω—ç–ª—ç–≥—Ç —Ö“Ø—Ä–≥—ç–Ω—ç. –®–∞—Ä—Ö—ã–≥ —Ü—ç–≤—ç—Ä —É—Å–∞–∞—Ä —É–≥–∞–∞–Ω–∞.';
    }
    
    if (lowerQuestion.includes('–∞–º—å—Å–≥–∞–ª') || lowerQuestion.includes('–∞–º—å—Å–≥–∞–∞')) {
      return '–ê–º—å—Å–≥–∞–ª—ã–Ω —Ö“Ø–Ω–¥—Ä—ç–ª “Ø–µ–¥: 1) –ê–º–Ω—ã —Ö”©–Ω–¥–∏–π–≥ —á”©–ª”©”©–ª–Ω”©, 2) –•—ç–ª–∏–π–≥ –≥–∞—Ä–≥–∞–∂ ”©–≥–Ω”©, 3) –¢–∞–π–≤–∞–Ω –±–∞–π–ª–≥–∞–Ω–∞, 4) –®—É—É–¥ —ç–º–Ω—ç–ª—ç–≥—Ç —Ö“Ø—Ä–≥—ç–Ω—ç. –•–∏–π–º—ç–ª –∞–º—å—Å–≥–∞–ª ”©–≥”©—Ö–∏–π–≥ –±“Ø“Ø –æ—Ä–æ–ª–¥–æ–Ω–æ.';
    }
    
    if (lowerQuestion.includes('—ç–º–≥—ç–≥') || lowerQuestion.includes('—Ç–∞—Ç–∞—Ö')) {
      return '–≠–º–≥—ç–≥ —Ç–∞—Ç–∞–∂ –±–∞–π—Ö–∞–¥: 1) –ê–º—å—Ç–Ω—ã–≥ –∞—é—É–ª–≥“Ø–π –≥–∞–∑–∞—Ä —Ç–∞–≤–∏–Ω–∞, 2) –≠—Ä–≥—ç–Ω —Ç–æ–π—Ä–æ–Ω–¥ –≥—ç–º—Ç—ç–π –∑“Ø–π–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞, 3) –≠–º–≥—ç–≥–∏–π–Ω —Ö—É–≥–∞—Ü–∞–∞, –¥–∞–≤—Ç–∞–º–∂–∏–π–≥ —Ç—ç–º–¥—ç–≥–ª—ç–Ω—ç, 4) –≠–º–≥—ç–≥ –¥—É—É—Å—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ —ç–º–Ω—ç–ª—ç–≥—Ç —Ö“Ø—Ä–≥—ç–Ω—ç.';
    }
    
    if (lowerQuestion.includes('–≤–∞–∫—Ü–∏–Ω')) {
      return '–í–∞–∫—Ü–∏–Ω–∂–∏–ª—Ç—ã–Ω —Ö—É–≤–∞–∞—Ä—å: –ì”©–ª–≥”©—Ä –∞–º—å—Ç–∞–¥ 6-8 –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥—Ç–æ–π, –±“Ø—Ä—ç–Ω –Ω–∞—Å–Ω—ã –∞–º—å—Ç–∞–¥ –∂–∏–ª–¥ 1 —É–¥–∞–∞. –†–∞–±–∏–¥–∏—Å, —á–∏—á—Ä—ç—Ö ”©–≤—á–∏–Ω, –≥–µ–ø–∞—Ç–∏—Ç –∑—ç—Ä—ç–≥ –≤–∞–∫—Ü–∏–Ω—É—É–¥ —Ö—ç—Ä—ç–≥—Ç—ç–π. –≠–º—á—Ç—ç–π –∑”©–≤–ª”©–ª–¥”©”©—Ä—ç–π.';
    }
    
    if (lowerQuestion.includes('—Ö–æ–æ–ª') || lowerQuestion.includes('—Ö–æ–æ–ª–ª–æ–ª—Ç')) {
      return '–ê–º—å—Ç–¥—ã–Ω —Ö–æ–æ–ª–ª–æ–ª—Ç: –ù–∞—Å–Ω—ã –±“Ø–ª—ç–≥—Ç —Ç–æ—Ö–∏—Ä—Å–æ–Ω —Ç—ç–Ω—Ü–≤—ç—Ä—Ç—ç–π —Ö–æ–æ–ª ”©–≥–Ω”©. –•“Ø–Ω–∏–π —Ö–æ–æ–ª, —à–æ–∫–æ–ª–∞–¥, –≤–∏–Ω–æ–≥—Ä–∞–¥, —Å–æ–Ω–≥–∏–Ω–æ –∑—ç—Ä—ç–≥ —Ö–æ—Ä—Ç —Ö“Ø–Ω—Å–∏–π–≥ ”©–≥”©—Ö–≥“Ø–π. –¶—ç–≤—ç—Ä —É—Å –±–∞–π–Ω–≥–∞ –±–∞–π–ª–≥–∞–Ω–∞.';
    }
    
    if (lowerQuestion.includes('–∞–ª–¥–∞–≥–¥—Å–∞–Ω') || lowerQuestion.includes('—Ç”©”©—Ä—Å”©–Ω')) {
      return '–ê–º—å—Ç–∞–Ω –∞–ª–¥–∞–≥–¥—Å–∞–Ω “Ø–µ–¥: 1) –û—Ä—á–∏–Ω —Ç–æ–π—Ä–æ–Ω–¥ —Ö–∞–π–Ω–∞, 2) –û—Ä–æ–Ω –Ω—É—Ç–≥–∏–π–Ω —ç–º–Ω—ç–ª—ç–≥, shelter-–¥ –º—ç–¥—ç—ç–ª–Ω—ç, 3) –°–æ—Ü —Å“Ø–ª–∂—ç—ç–Ω–¥ –∑–∞—Ä —Ç–∞–≤–∏–Ω–∞, 4) Chip-—Ç—ç–π –±–æ–ª —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥–∞–¥ —Ö–∞–Ω–¥–∞–Ω–∞.';
    }
    
    // Default response
    return '–¢–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –æ–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. –¢–∞ –∏–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π –∞—Å—É—É–≥–∞–∞–¥ “Ø–∑—ç—ç—Ä—ç–π. –ñ–∏—à—ç—ç –Ω—å: "–∞–º—å—Ç–∞–Ω —Ö–æ—Ä–¥—Å–æ–Ω “Ø–µ–¥ —è–∞—Ö –≤—ç?", "—Ü—É—Å –∞–ª–¥–∞–∂ –±–∞–π—Ö–∞–¥ —Ö—ç—Ä—Ö—ç–Ω —Ç—É—Å–ª–∞—Ö –≤—ç?" –≥—ç—Ö –º—ç—Ç. –•“Ø–Ω–¥ —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ —à—É—É–¥ —ç–º—á–∏–¥ “Ø–∑“Ø“Ø–ª—ç—ç—Ä—ç–π.';
  };

  const quickQuestions = [
    "–ê–º—å—Ç–∞–Ω —Ö–æ—Ä–¥—Å–æ–Ω —à–∏–Ω–∂ —Ç—ç–º–¥—ç–≥ —è–º–∞—Ä –≤—ç?",
    "–¶—É—Å –∞–ª–¥–∞–∂ –±–∞–π—Ö–∞–¥ —è–∞—Ö –≤—ç?",
    "–ê–º—å—Å–≥–∞–∞—Ö —Ö“Ø–Ω–¥—Ä—ç–ª “Ø–µ–¥ —è–∞—Ö –≤—ç?",
    "–≠–º–≥—ç–≥ —Ç–∞—Ç–∞–∂ –±–∞–π—Ö–∞–¥ —è–∞—Ö –≤—ç?",
    "–ú—É—É—Ä—ã–Ω –≤–∞–∫—Ü–∏–Ω—ã —Ö—É–≤–∞–∞—Ä—å",
    "–ê–º—å—Ç–∞–Ω –∞–ª–¥–∞–≥–¥—Å–∞–Ω “Ø–µ–¥ —è–∞—Ö –≤—ç?"
  ];

  const handleQuickQuestion = (question: string) => {
    setInputValue(question);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-2xl shadow-xl border border-slate-200 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-emerald-500 to-emerald-400 text-white p-6">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
              <Bot size={24} />
            </div>
            <div>
              <h2 className="text-xl font-bold">AI –ê–Ω—Ö–Ω—ã —Ç—É—Å–ª–∞–º–∂</h2>
              <p className="text-emerald-100 text-sm">–ê–º—å—Ç–¥—ã–Ω –º—ç—Ä–≥—ç–∂–ª–∏–π–Ω –∑”©–≤–ª”©–≥”©”©</p>
            </div>
          </div>
        </div>

        {/* Messages Container */}
        <div className="h-96 overflow-y-auto p-6 bg-slate-50">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                    message.isUser
                      ? 'bg-emerald-500 text-white rounded-br-none'
                      : 'bg-white border border-slate-200 text-slate-700 rounded-bl-none'
                  }`}
                >
                  <div className="flex items-start gap-2">
                    {!message.isUser && (
                      <Bot size={16} className="text-emerald-500 mt-1 flex-shrink-0" />
                    )}
                    {message.isUser && (
                      <User size={16} className="text-emerald-100 mt-1 flex-shrink-0" />
                    )}
                    <div>
                      <p className="text-sm">{message.text}</p>
                      <p className={`text-xs mt-1 ${
                        message.isUser ? 'text-emerald-100' : 'text-slate-400'
                      }`}>
                        {message.timestamp.toLocaleTimeString('mn-MN', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-white border border-slate-200 text-slate-700 rounded-lg rounded-bl-none px-4 py-3 max-w-xs">
                  <div className="flex items-center gap-2">
                    <Bot size={16} className="text-emerald-500" />
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Quick Questions */}
        <div className="px-6 py-4 bg-white border-t border-slate-200">
          <p className="text-sm font-medium text-slate-700 mb-3">üö® –¢“Ø–≥—ç—ç–º—ç–ª –∞—Å—É—É–ª—Ç—É—É–¥:</p>
          <div className="flex flex-wrap gap-2">
            {quickQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => handleQuickQuestion(question)}
                disabled={isLoading}
                className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-xs hover:bg-red-200 transition-colors border border-red-200 disabled:opacity-50"
              >
                {question}
              </button>
            ))}
          </div>
        </div>

        {/* Input Area */}
        <div className="p-6 bg-white border-t border-slate-200">
          <div className="flex gap-3">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="–ê–º—å—Ç–Ω—ã —Ç–∞–ª–∞–∞—Ä –∞—Å—É—É–ª—Ç –∞—Å—É—É–≥–∞–∞—Ä–∞–π..."
              disabled={isLoading}
              className="flex-1 px-4 py-3 border border-slate-200 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none disabled:opacity-50"
            />
            <Button
              onClick={handleSend}
              disabled={!inputValue.trim() || isLoading}
              variant="primary"
              size="md"
              className="px-6 bg-emerald-500 hover:bg-emerald-600"
            >
              {isLoading ? (
                <Loader2 size={20} className="animate-spin" />
              ) : (
                <Send size={20} />
              )}
            </Button>
          </div>
        </div>

        {/* Warning */}
        <div className="px-6 py-4 bg-yellow-50 border-t border-yellow-200">
          <div className="flex items-start gap-2">
            <AlertTriangle size={16} className="text-yellow-600 mt-0.5 flex-shrink-0" />
            <p className="text-xs text-yellow-800">
              <strong>–ê–Ω—Ö–∞–∞—Ä–∞—Ö –∑“Ø–π–ª:</strong> –≠–Ω—ç AI —Ç—É—Å–ª–∞—Ö –Ω—å –∑”©–≤—Ö”©–Ω –∞–Ω—Ö–Ω—ã —Ç—É—Å–ª–∞–º–∂–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª ”©–≥—á –±–∞–π–≥–∞–∞ –±”©–≥”©”©–¥ —ç–º—á–∏–π–Ω –æ–Ω–æ—à–ª–æ–≥–æ–æ, —ç–º—á–∏–ª–≥—ç—ç–≥ –æ—Ä–ª–æ—Ö–≥“Ø–π. –•“Ø–Ω–¥ —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ –∑–∞–∞–≤–∞–ª —ç–º—á–∏–¥ “Ø–∑“Ø“Ø–ª—ç—ç—Ä—ç–π.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
