'use client';

import { useState, useEffect, useCallback } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { TOrganization } from '@/types';
import OrganizationCard from './OrganizationCard';
import SkeletonList from '@/components/skeletons/SkeletonList';
import EmptyState from '@/components/empty/EmptyState';

interface OrganizationListParams {
  page?: number;
  pageSize?: number;
  type?: string;
  city?: string;
  verified?: boolean;
  search?: string;
}

interface OrganizationListResponse {
  organizations: TOrganization[];
  totalCount: number;
}

interface OrganizationListProps {
  initialData?: OrganizationListResponse;
  typeFilter?: string;
  cityFilter?: string;
  verifiedFilter?: boolean;
  searchQuery?: string;
}

// –®“Ø“Ø–ª—Ç–∏–π–Ω –æ–ø—Ü—É—É–¥
const typeOptions = [
  { value: '', label: '–ë“Ø—Ö —Ç”©—Ä”©–ª' },
  { value: 'VETERINARY', label: 'üè• –ú–∞–ª—ã–Ω —ç–º–Ω—ç–ª—ç–≥' },
  { value: 'SHELTER', label: 'üè† –ë–∞–π—Ä —Ö–∞–º–≥–∞–∞–ª–∞—Ö' },
  { value: 'RESCUE', label: 'üÜò –ê–≤—Ä–∞—Ö “Ø–π–ª—á–∏–ª–≥—ç—ç' },
  { value: 'TRAINING', label: 'üéì –°—É—Ä–≥–∞–ª—Ç' },
  { value: 'OTHER', label: 'üè¢ –ë—É—Å–∞–¥' },
];

const cityOptions = [
  { value: '', label: '–ë“Ø—Ö —Ö–æ—Ç' },
  { value: 'UB', label: 'üèôÔ∏è –£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä' },
  { value: 'ERDENET', label: 'üè≠ –≠—Ä–¥—ç–Ω—ç—Ç' },
  { value: 'DARKHAN', label: 'üèòÔ∏è –î–∞—Ä—Ö–∞–Ω' },
  { value: 'CHOIBALSAN', label: 'üåæ –ß–æ–π–±–∞–ª—Å–∞–Ω' },
  { value: 'OTHER', label: 'üèûÔ∏è –ë—É—Å–∞–¥' },
];

export default function OrganizationList({
  initialData,
  typeFilter,
  cityFilter,
  verifiedFilter,
  searchQuery,
}: OrganizationListProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // State management
  const [organizations, setOrganizations] = useState<TOrganization[]>(initialData?.organizations || []);
  const [totalCount, setTotalCount] = useState(initialData?.totalCount || 0);
  const [loading, setLoading] = useState(!initialData);
  const [error, setError] = useState<string | null>(null);
  
  // Filter states
  const [selectedType, setSelectedType] = useState(typeFilter || '');
  const [selectedCity, setSelectedCity] = useState(cityFilter || '');
  const [selectedVerified, setSelectedVerified] = useState(verifiedFilter || false);
  const [searchTerm, setSearchTerm] = useState(searchQuery || '');
  
  // Pagination
  const currentPage = parseInt(searchParams.get('page') || '1');
  const pageSize = 9;

  // Simulate API call - replace with actual API
  const fetchOrganizations = useCallback(async (params: OrganizationListParams) => {
    try {
      setLoading(true);
      setError(null);
      
      // Mock data for demo
      const mockOrganizations: TOrganization[] = [
        {
          id: '1',
          name: '–ê–º—å—Ç–∞–Ω —Ö–∞–π—Ä –º–∞–ª—ã–Ω —ç–º–Ω—ç–ª—ç–≥',
          verified: true,
          description: '–ê–º—å—Ç–¥—ã–Ω —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–≥ —Ö–∞–º–≥–∞–∞–ª–∂, —ç–º—á–∏–ª–≥—ç—ç “Ø–π–ª—á–∏–ª–≥—ç—ç “Ø–∑“Ø“Ø–ª–¥—ç–≥ —Ç—É—Å–≥–∞–π —ç–º–Ω—ç–ª—ç–≥',
          address: '–ß–∏–Ω–≥—ç–ª—Ç—ç–π –¥“Ø“Ø—Ä—ç–≥, 4-—Ä —Ö–æ—Ä–æ–æ',
          phone: '7700-1234',
          email: 'info@petcare.mn',
          services: ['“Æ–∑–ª—ç–≥ —ç–º—á–∏–ª–≥—ç—ç', '–ú—ç—Å –∑–∞—Å–∞–ª', '–í–∞–∫—Ü–∏–Ω–∂—É—É–ª–∞–ª—Ç'],
        },
        {
          id: '2',
          name: '–ì—ç—Ä–∏–π–Ω —Ç—ç–∂—ç—ç–≤—ç—Ä –∞–º—å—Ç–∞–Ω —Ö–∞–º–≥–∞–∞–ª–∞—Ö —Ç”©–≤',
          verified: true,
          description: '–≠–∑—ç–Ω–≥“Ø–π –∞–º—å—Ç–¥—ã–≥ —Ö–∞–º–≥–∞–∞–ª–∂, —à–∏–Ω—ç –≥—ç—Ä –±“Ø–ª –æ–ª–æ—Ö–æ–¥ —Ç—É—Å–ª–∞—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥–∞',
          address: '–ë–∞—è–Ω–∑“Ø—Ä—Ö –¥“Ø“Ø—Ä—ç–≥, 12-—Ä —Ö–æ—Ä–æ–æ',
          phone: '9911-5678',
          email: 'rescue@shelter.mn',
          services: ['–ê–º—å—Ç–∞–Ω “Ø—Ä—á–ª—ç—Ö', '–¢“Ø—Ä –∞—Å—Ä–∞—Ö', '–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω “Ø–∑–ª—ç–≥'],
        },
        {
          id: '3',
          name: '–£—Ö–∞–∞–ª–∞–≥ —Ç—ç–∂—ç—ç–≤—ç—Ä —Å—É—Ä–≥–∞–ª—Ç—ã–Ω —Ç”©–≤',
          verified: false,
          description: '–ù–æ—Ö–æ–π, –º—É—É—Ä–Ω—ã –¥“Ø—Ä—ç–º —Å–∞—Ö–∏–ª–≥–∞, –¥–∞—Å–≥–∞–ª —Å—É—Ä–≥—É—É–ª–∏–ª—Ç “Ø–∑“Ø“Ø–ª—ç—Ö',
          address: '–°“Ø—Ö–±–∞–∞—Ç–∞—Ä –¥“Ø“Ø—Ä—ç–≥, 8-—Ä —Ö–æ—Ä–æ–æ',
          phone: '8800-9999',
          email: 'training@smartpet.mn',
          services: ['–°—É—Ä–≥–∞–ª—Ç', '–ó–∞–Ω “Ø–π–ª–∏–π–Ω –∑–∞—Å–≤–∞—Ä', '–ù–∏–π–≥—ç–º—à“Ø“Ø–ª—ç—Ö'],
        },
      ];
      
      // Apply filters
      let filteredOrgs = mockOrganizations;
      
      if (params.search) {
        filteredOrgs = filteredOrgs.filter(org => 
          org.name.toLowerCase().includes(params.search!.toLowerCase()) ||
          org.description?.toLowerCase().includes(params.search!.toLowerCase())
        );
      }
      
      if (params.verified !== undefined) {
        filteredOrgs = filteredOrgs.filter(org => org.verified === params.verified);
      }
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setOrganizations(filteredOrgs);
      setTotalCount(filteredOrgs.length);
    } catch (err) {
      setError('–ë–∞–π–≥—É—É–ª–ª–∞–≥—É—É–¥—ã–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞—á–∞–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
      console.error('Error fetching organizations:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  // Effect to fetch data when filters change
  useEffect(() => {
    // Skip initial fetch if we have initial data and no filters
    if (initialData && currentPage === 1 && !selectedType && !selectedCity && !selectedVerified && !searchTerm) {
      return;
    }

    fetchOrganizations({
      page: currentPage,
      pageSize,
      type: selectedType || undefined,
      city: selectedCity || undefined,
      verified: selectedVerified || undefined,
      search: searchTerm || undefined,
    });
  }, [currentPage, selectedType, selectedCity, selectedVerified, searchTerm, fetchOrganizations, initialData]);

  // Filter handlers
  const handleTypeChange = (type: string) => {
    setSelectedType(type);
    updateURLParams({ type });
  };

  const handleCityChange = (city: string) => {
    setSelectedCity(city);
    updateURLParams({ city });
  };

  const handleVerifiedChange = (verified: boolean) => {
    setSelectedVerified(verified);
    updateURLParams({ verified: verified ? 'true' : '' });
  };

  const handleSearchChange = (search: string) => {
    setSearchTerm(search);
    updateURLParams({ search });
  };

  const updateURLParams = (newParams: Record<string, string>) => {
    const params = new URLSearchParams(searchParams);
    
    Object.entries(newParams).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });
    
    // Reset page when filters change
    params.delete('page');
    
    router.push(`?${params.toString()}`, { scroll: false });
  };

  // Clear all filters
  const clearFilters = () => {
    setSelectedType('');
    setSelectedCity('');
    setSelectedVerified(false);
    setSearchTerm('');
    router.push('/organizations', { scroll: false });
  };

  // Retry handler
  const handleRetry = () => {
    fetchOrganizations({
      page: currentPage,
      pageSize,
      type: selectedType || undefined,
      city: selectedCity || undefined,
      verified: selectedVerified || undefined,
      search: searchTerm || undefined,
    });
  };

  return (
    <div id="organization-list" className="space-y-6">
      {/* –®“Ø“Ø–ª—Ç“Ø“Ø—Ä —Ö—ç—Å—ç–≥ */}
      <div className="bg-white rounded-3xl shadow-lg border border-gray-100 p-6">
        <div className="flex flex-col lg:flex-row gap-4">
          {/* –•–∞–π–ª—Ç—ã–Ω —Ç–∞–ª–±–∞—Ä */}
          <div className="flex-1">
            <div className="relative">
              <input
                type="text"
                placeholder="–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –Ω—ç—Ä —Ö–∞–π—Ö..."
                value={searchTerm}
                onChange={(e) => handleSearchChange(e.target.value)}
                className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-emerald-300 focus:border-emerald-400 transition-all duration-200"
              />
              <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                üîç
              </div>
            </div>
          </div>

          {/* –¢”©—Ä”©–ª —Å–æ–Ω–≥–æ—Ö */}
          <div className="min-w-48">
            <select
              value={selectedType}
              onChange={(e) => handleTypeChange(e.target.value)}
              className="w-full px-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-emerald-300 focus:border-emerald-400 transition-all duration-200 appearance-none bg-white"
            >
              {typeOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* –•–æ—Ç —Å–æ–Ω–≥–æ—Ö */}
          <div className="min-w-48">
            <select
              value={selectedCity}
              onChange={(e) => handleCityChange(e.target.value)}
              className="w-full px-4 py-3 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-emerald-300 focus:border-emerald-400 transition-all duration-200 appearance-none bg-white"
            >
              {cityOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω */}
          <div className="flex items-center">
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={selectedVerified}
                onChange={(e) => handleVerifiedChange(e.target.checked)}
                className="w-5 h-5 text-emerald-600 rounded focus:ring-emerald-300"
              />
              <span className="text-sm font-medium text-gray-700">‚úì –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω</span>
            </label>
          </div>

          {/* –¶—ç–≤—ç—Ä–ª—ç—Ö —Ç–æ–≤—á */}
          {(selectedType || selectedCity || selectedVerified || searchTerm) && (
            <button
              onClick={clearFilters}
              className="px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-2xl transition-colors"
            >
              üóëÔ∏è –¶—ç–≤—ç—Ä–ª—ç—Ö
            </button>
          )}
        </div>
      </div>

      {/* “Æ—Ä –¥“Ø–Ω–≥–∏–π–Ω —Ç–æ–æ */}
      {!loading && (
        <div className="flex items-center justify-between text-sm text-gray-600">
          <span>
            {totalCount > 0 ? (
              <>
                <span className="font-semibold text-emerald-600">{totalCount}</span> –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥–ª–æ–æ
              </>
            ) : (
              '–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π'
            )}
          </span>
          {(selectedType || selectedCity || selectedVerified || searchTerm) && (
            <span className="text-blue-600">
              üîç –®“Ø“Ø–ª—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞
            </span>
          )}
        </div>
      )}

      {/* Error state */}
      {error && (
        <div className="text-center py-12">
          <div className="mx-auto w-16 h-16 text-red-400 mb-4">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" className="w-full h-full">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">{error}</h3>
          <button
            onClick={handleRetry}
            className="inline-flex items-center px-4 py-2 bg-emerald-600 text-white text-sm font-medium rounded-lg hover:bg-emerald-700 focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 focus:outline-none transition-colors"
          >
            <span className="mr-2">üîÑ</span>
            –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ—Ö
          </button>
        </div>
      )}

      {/* Loading state */}
      {loading && <SkeletonList count={pageSize} />}

      {/* Empty state */}
      {!loading && !error && organizations.length === 0 && (
        <EmptyState
          title="–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π"
          description={
            selectedType || selectedCity || selectedVerified || searchTerm
              ? "–¢–∞–Ω—ã —Ö–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω–¥ —Ç–æ—Ö–∏—Ä–æ—Ö –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. ”®”©—Ä —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –∞—à–∏–≥–ª–∞–Ω —Ö–∞–π–∂ “Ø–∑—ç—ç—Ä—ç–π."
              : "–û–¥–æ–æ–≥–æ–æ—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞. –¢–∞ —ç—Ö–Ω–∏–π –±–∞–π–≥—É—É–ª–ª–∞–≥–∞–∞ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—ç—Ä—ç–π."
          }
          actionText="–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö"
          actionHref="/organizations/apply"
        />
      )}

      {/* Organization Grid */}
      {!loading && !error && organizations.length > 0 && (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {organizations.map((organization, index) => (
            <div key={organization.id} className="stagger-item" style={{ animationDelay: `${index * 0.1}s` }}>
              <OrganizationCard organization={organization} />
            </div>
          ))}
        </div>
      )}

      {/* Pagination placeholder - future implementation */}
      {!loading && !error && organizations.length > 0 && Math.ceil(totalCount / pageSize) > 1 && (
        <div className="text-center py-8">
          <div className="text-gray-500">
            üîÑ –•—É—É–¥–∞—Å–ª–∞–ª—Ç —Ç—É–Ω —É–¥–∞—Ö–≥“Ø–π –Ω—ç–º—ç–≥–¥—ç–Ω—ç
          </div>
        </div>
      )}
    </div>
  );
}
